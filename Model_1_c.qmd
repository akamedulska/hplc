# Comparison of population parameter values

```{r}
#| echo: false
#| message: false
library(pracma)
library(dplyr)
library(ggplot2)
require(gridExtra)
library(GGally)
library(cmdstanr)
library(rstan)
library(knitr)
library(reshape2)
library(bayesplot)
library(posterior)

set.seed(10271998) ## not required but assures repeatable results
```

## XBridge Shield C18

```{r}
#| echo: false
#| message: false
#| warning: false
#fit_Bridge <- cmdstanr::as_cmdstan_fit(c('C:/Users/agnie/Desktop/HPLC_2022/X_Bridge_Shield_C18/TASK/output_1.csv',
#                                         'C:/Users/agnie/Desktop/HPLC_2022/X_Bridge_Shield_C18/TASK/output_2.csv',
#                                         'C:/Users/agnie/Desktop/HPLC_2022/X_Bridge_Shield_C18/TASK/output_3.csv',
#                                         'C:/Users/agnie/Desktop/HPLC_2022/X_Bridge_Shield_C18/TASK/output_4.csv'))

fit_Bridge <- cmdstanr::as_cmdstan_fit(
  c('C:/Users/agnie/Desktop/HPLC_2022/X_Bridge_Shield_C18/csv_files/csv/Feq4Okp2JaerpsFyxOxYk2-output-1.csv',
    'C:/Users/agnie/Desktop/HPLC_2022/X_Bridge_Shield_C18/csv_files/csv/Feq4Okp2JaerpsFyxOxYk2-output-2.csv',
    'C:/Users/agnie/Desktop/HPLC_2022/X_Bridge_Shield_C18/csv_files/csv/Feq4Okp2JaerpsFyxOxYk2-output-3.csv',
    'C:/Users/agnie/Desktop/HPLC_2022/X_Bridge_Shield_C18/csv_files/csv/Feq4Okp2JaerpsFyxOxYk2-output-4.csv'))

draws_df_Bridge <- fit_Bridge$draws(format = "df")

parameters <- c("logkwHat","S1mHat","S1aHat","S2mHat","S2aHat","dlogkwHat[1]","dlogkwHat[2]","dSmHat[1]","dSmHat[2]",
"dSaHat[1]","dSaHat[2]","dlogkTHat","beta[1]","beta[2]","beta[3]","alphaAHat[1]","alphaAHat[2]",
"alphaBHat[1]","alphaBHat[2]","omega[1]","omega[2]","omega[3]","omegadlogkT","kappa[1]","kappa[2]","kappa[3]",
"tau[1]","tau[2]","apH[1]","apH[2]","msigma","ssigma")

data_to_plot_par_Bridge <- draws_df_Bridge[,which(colnames(draws_df_Bridge) %in% parameters)]

lab <- c(expression(theta["logkwN"]),
         expression(theta["S1mN"]),expression(theta["S1aN"]),
         expression(theta["S2m"]),expression(theta["S2a"]),
         expression(theta["dlogkwA"]),expression(theta["dlogkwB"]),
         expression(theta["dSmA"]),expression(theta["dSmB"]),
         expression(theta["dSaA"]),expression(theta["dSaB"]),
         expression(theta["dlogkT"]),
         expression(beta["logkwN"]),expression(beta["S1mN"]),
         expression(beta["S1aN"]),
         expression(alpha["mA"]),expression(alpha["aA"]),
         expression(alpha["mB"]),expression(alpha["aB"]),
         expression(omega["logkwN"]),expression(omega["S1mN"]),
         expression(omega["S1aN"]),expression(omega["dlogkT"]),
         expression(kappa["logkwN"]),expression(kappa["S1mN"]),
         expression(kappa["S1aN"]),
         expression(tau["m"]),expression(tau["a"]),
         expression(apH["A"]),expression(apH["B"]),
         expression(m[sigma]),expression(s[sigma]))
 
library(reshape2)
pp_B <- melt(data_to_plot_par_Bridge)
pp_B[,1] <- ordered(pp_B[,1],parameters) 
pp_B$Column <- rep("XBridge Shield C18",nrow(pp_B))
ggplot(data = pp_B, aes(x=variable, y=value)) + geom_boxplot(aes(fill=variable),outlier.shape=NA)+ coord_flip()+
  theme(legend.position = "none")+ scale_x_discrete(labels=rev(lab),limits=rev)+
  labs(y="Marginal posterior distributions",x="")
```

## XTerra C18

```{r}
#| echo: false
#| message: false
#| warning: false
fit_Terra <- cmdstanr::as_cmdstan_fit(c('C:/Users/agnie/Desktop/HPLC_2022/X_Terra_C18/TASK/output_1.csv',
                                        'C:/Users/agnie/Desktop/HPLC_2022/X_Terra_C18/TASK/output_2.csv',
                                        'C:/Users/agnie/Desktop/HPLC_2022/X_Terra_C18/TASK/output_3.csv',
                                        'C:/Users/agnie/Desktop/HPLC_2022/X_Terra_C18/TASK/output_4.csv'))

draws_df_Terra <- fit_Terra$draws(format = "df")

parameters <- c("logkwHat","S1mHat","S1aHat","S2mHat","S2aHat","dlogkwHat[1]","dlogkwHat[2]","dSmHat[1]","dSmHat[2]",
"dSaHat[1]","dSaHat[2]","dlogkTHat","beta[1]","beta[2]","beta[3]","alphaAHat[1]","alphaAHat[2]",
"alphaBHat[1]","alphaBHat[2]","omega[1]","omega[2]","omega[3]","omegadlogkT","kappa[1]","kappa[2]","kappa[3]",
"tau[1]","tau[2]","apH[1]","apH[2]","msigma","ssigma")

data_to_plot_par_Terra <- draws_df_Terra[,which(colnames(draws_df_Terra) %in% parameters)]

lab <- c(expression(theta["logkwN"]),
         expression(theta["S1mN"]),expression(theta["S1aN"]),
         expression(theta["S2m"]),expression(theta["S2a"]),
         expression(theta["dlogkwA"]),expression(theta["dlogkwB"]),
         expression(theta["dSmA"]),expression(theta["dSmB"]),
         expression(theta["dSaA"]),expression(theta["dSaB"]),
         expression(theta["dlogkT"]),
         expression(beta["logkwN"]),expression(beta["S1mN"]),
         expression(beta["S1aN"]),
         expression(alpha["mA"]),expression(alpha["aA"]),
         expression(alpha["mB"]),expression(alpha["aB"]),
         expression(omega["logkwN"]),expression(omega["S1mN"]),
         expression(omega["S1aN"]),expression(omega["dlogkT"]),
         expression(kappa["logkwN"]),expression(kappa["S1mN"]),
         expression(kappa["S1aN"]),
         expression(tau["m"]),expression(tau["a"]),
         expression(apH["A"]),expression(apH["B"]),
         expression(m[sigma]),expression(s[sigma]))
 
library(reshape2)
pp_T <- melt(data_to_plot_par_Terra)
pp_T[,1] <- ordered(pp_T[,1],parameters) 
pp_T$Column <- rep("XTerra C18",nrow(pp_T))
ggplot(data = pp_T, aes(x=variable, y=value)) + geom_boxplot(aes(fill=variable),outlier.shape=NA)+ coord_flip()+
  theme(legend.position = "none")+ scale_x_discrete(labels=rev(lab),limits=rev)+
  labs(y="Marginal posterior distributions",x="")

```

## Comparison of the columns

```{r, fig.height=12}
#| echo: false
#| message: false
#| warning: false
pp <- rbind(pp_B,pp_T)
ggplot(data = pp, aes(x=variable, y=value)) + geom_boxplot(aes(fill=Column),outlier.shape=NA)+ coord_flip()+
  #theme(legend.position = "none")+ 
  scale_x_discrete(labels=rev(lab),limits=rev)+
  labs(y="Marginal posterior distributions",x="")
```

```{r, fig.height=14}
#| echo: false
#| message: false
#| warning: false
lab_names <- list(
  	'logkwHat'=expression(theta["logkwN"]),
  	"S1mHat"=expression(theta["S1mN"]),
  	"S1aHat"=expression(theta["S1aN"]),
    "S2mHat"=expression(theta["S2m"]),
	  "S2aHat"=expression(theta["S2a"]),
    "dlogkwHat[1]"=expression(theta["dlogkwA"]),
	  "dlogkwHat[2]"=expression(theta["dlogkwB"]),
    "dSmHat[1]"=expression(theta["dSmA"]),
	  "dSmHat[2]"=expression(theta["dSmB"]),
    "dSaHat[1]"=expression(theta["dSaA"]),
	  "dSaHat[2]"=expression(theta["dSaB"]),
    "dlogkTHat"=expression(theta["dlogkT"]),
    "beta[1]"=expression(beta["logkwN"]),
	  "beta[2]"=expression(beta["S1mN"]),
    "beta[3]"=expression(beta["S1aN"]),
    "alphaAHat[1]"=expression(alpha["mA"]),
	  "alphaAHat[2]"=expression(alpha["aA"]),
    "alphaBHat[1]"=expression(alpha["mB"]),
	  "alphaBHat[2]"=expression(alpha["aB"]),
    "omega[1]"=expression(omega["logkwN"]),
	  "omega[2]"=expression(omega["S1mN"]),
    "omega[3]"=expression(omega["S1aN"]),
	  "omegadlogkT"=expression(omega["dlogkT"]),
    "kappa[1]"=expression(kappa["logkwN"]),
	  "kappa[2]"=expression(kappa["S1mN"]),
    "kappa[3]"=expression(kappa["S1aN"]),
    "tau[1]"=expression(tau["m"]),
	  "tau[2]"=expression(tau["a"]),
    "apH[1]"=expression(apH["A"]),
	  "apH[2]"=expression(apH["B"]),
    "msigma"=expression(m[sigma]),
	  "ssigma"=expression(s[sigma])
)

lab_labeller <- function(variable,value){
  return(lab_names[value])
}

ggplot(data = pp, aes(x=variable, y=value)) + geom_boxplot(aes(fill=Column),outlier.shape=NA)+ coord_flip()+
  #theme(legend.position = "none")+ 
  scale_x_discrete(labels=lab_labeller())+
  labs(y="Marginal posterior distributions",x="")+facet_wrap(~variable, labeller=lab_labeller,scales = "free", nrow = 16)
```
## Parameters related to functional groups


### XBridge Shield C18 
```{r, fig.height=14}
#| echo: false
#| message: false
#| warning: false
functional_groups = read.csv('C:/Users/agnie/Desktop/HPLC_2022/X_Bridge_Shield_C18/skrypt-R/data/6-checkmol-functional-groups.csv')
functional_groups_names = read.csv('C:/Users/agnie/Desktop/HPLC_2022/X_Bridge_Shield_C18/skrypt-R/data/Legend-checkmol-functional-group-names.csv')

functional_groups=functional_groups[,2:ncol(functional_groups)]

# combine nr of caroboxylic acid and carboxyalic acid salt functional groups
functional_groups[,76]=functional_groups[,76]+functional_groups[,77]       
functional_groups[which(functional_groups[,202]>5.5),202] = 6; # heterocyclic compounds with more than 6 heterocycles are treated as if they have six

########
idx_included <- c(4,5,9,11,14,18,19,20,21,24,26,29,30,31,32,33,34,38,39,40,41,45,49,50,52,53,54,56,57,59,63,64,68,69,70,71,76,78,79,81,82,83,84,85,88,90,106,108,113,114,115,127,131,133,137,138,150,164,166,167)
functional_groups_names <- functional_groups_names[idx_included,]
functional_groups <- functional_groups[,idx_included]
########

lab_names <- list(
  	'pilogkw'=expression(pi["logkwN"]),
  	"piS1m"=expression(pi["S1mN"]),
	  "piS1a"=expression(pi["S1aN"])
)

lab_labeller <- function(variable,value){
  return(lab_names[value])
}

```

```{r, fig.height=14}
#| echo: false
#| message: false
#| warning: false
 
data_to_plot_par_pilogkw_Bridge <- draws_df_Bridge[,which(colnames(draws_df_Bridge) %in% grep("pilogkw", names(draws_df_Bridge), value = TRUE))]
data_to_plot_par_piS1m_Bridge <- draws_df_Bridge[,which(colnames(draws_df_Bridge) %in% grep("piS1m", names(draws_df_Bridge), value = TRUE))]
data_to_plot_par_piS1a_Bridge <- draws_df_Bridge[,which(colnames(draws_df_Bridge) %in% grep("piS1a", names(draws_df_Bridge), value = TRUE))]

pp_B_pilogkw <- melt(data_to_plot_par_pilogkw_Bridge)
pp_B_pilogkw[,1] <- ordered(pp_B_pilogkw[,1]) 
pp_B_S1m <- melt(data_to_plot_par_piS1m_Bridge)
pp_B_S1m[,1] <- ordered(pp_B_S1m[,1]) 
pp_B_S1a <- melt(data_to_plot_par_piS1a_Bridge)
pp_B_S1a[,1] <- ordered(pp_B_S1a[,1]) 

pp_B_pi <- rbind(pp_B_pilogkw,pp_B_S1m,pp_B_S1a)
pp_B_pi$parameter <- rep(c("pilogkw","piS1m","piS1a"),each=4000*60)
pp_B_pi$parameter_group <- rep(rep(functional_groups_names[,2],each=4000),3)
pp_B_pi$parameter <- ordered(pp_B_pi$parameter)

ggplot(data = pp_B_pi, aes(x=parameter_group, y=value,group=variable)) + geom_boxplot(aes(fill=parameter_group),outlier.shape=NA)+ coord_flip()+
  theme(legend.position = "none")+ 
  facet_grid(.~parameter, labeller=lab_labeller,scales = "free_y")+
  labs(y="Marginal posterior distributions",x="")
```

### XTerra C18
```{r, fig.height=14}
#| echo: false
#| message: false
#| warning: false

data_to_plot_par_pilogkw_Terra <- draws_df_Terra[,which(colnames(draws_df_Terra) %in% grep("pilogkw", names(draws_df_Terra), value = TRUE))]
data_to_plot_par_piS1m_Terra <- draws_df_Terra[,which(colnames(draws_df_Terra) %in% grep("piS1m", names(draws_df_Terra), value = TRUE))]
data_to_plot_par_piS1a_Terra <- draws_df_Terra[,which(colnames(draws_df_Terra) %in% grep("piS1a", names(draws_df_Terra), value = TRUE))]

pp_T_pilogkw <- melt(data_to_plot_par_pilogkw_Terra)
pp_T_pilogkw[,1] <- ordered(pp_T_pilogkw[,1]) 
pp_T_S1m <- melt(data_to_plot_par_piS1m_Terra)
pp_T_S1m[,1] <- ordered(pp_T_S1m[,1]) 
pp_T_S1a <- melt(data_to_plot_par_piS1a_Terra)
pp_T_S1a[,1] <- ordered(pp_T_S1a[,1]) 

pp_T_pi <- rbind(pp_T_pilogkw,pp_T_S1m,pp_T_S1a)
pp_T_pi$parameter <- rep(c("pilogkw","piS1m","piS1a"),each=4000*60)
pp_T_pi$parameter_group <- rep(rep(functional_groups_names[,2],each=4000),3)
pp_T_pi$parameter <- ordered(pp_T_pi$parameter)

ggplot(data = pp_T_pi, aes(x=parameter_group, y=value,group=variable)) + geom_boxplot(aes(fill=parameter_group),outlier.shape=NA)+ coord_flip()+
  theme(legend.position = "none")+ 
  facet_grid(.~parameter, labeller=lab_labeller,scales = "free_y")+
  labs(y="Marginal posterior distributions",x="")
  
```

### Comparison of the columns

```{r, fig.height=20}
#| echo: false
#| message: false
#| warning: false
pp_all_pi <- rbind(pp_B_pi,pp_T_pi)
pp_all_pi$Column <- rep(c("XBridge Shield C18","XTerra C18"),each=4000*60)

#ggplot(data = pp_all_pi, aes(x=variable, y=value)) + geom_boxplot(aes(fill=Column),outlier.shape=NA)+ coord_flip()+
#  theme(legend.position = "none")+ 
#  scale_x_discrete(labels=functional_groups_names[,2])+
#  labs(y="Marginal posterior distributions",x="")+facet_grid(.~parameter, labeller=lab_labeller,scales = "free_y")

ggplot(data = pp_all_pi, aes(x=parameter_group, y=value, fill=Column)) + geom_boxplot(outlier.shape=NA)+ coord_flip()+
  theme(legend.position = "none")+ 
  facet_grid(~parameter, labeller=lab_labeller,scales = "free_y")+
  labs(y="Marginal posterior distributions",x="")
```

Distribution of the difference:

```{r, fig.height=20}
#| echo: false
#| message: false
#| warning: false
pp_all_pi <- rbind(pp_B_pi,pp_T_pi)
pp_all_pi$Column <- rep(c("XBridge Shield C18","XTerra C18"),each=4000*60)

pp_all_diff <- pp_B_pi[,-2]
pp_all_diff$value <- pp_B_pi$value-pp_T_pi$value
#ggplot(data = pp_all_pi, aes(x=variable, y=value)) + geom_boxplot(aes(fill=Column),outlier.shape=NA)+ coord_flip()+
#  theme(legend.position = "none")+ 
#  scale_x_discrete(labels=functional_groups_names[,2])+
#  labs(y="Marginal posterior distributions",x="")+facet_grid(.~parameter, labeller=lab_labeller,scales = "free_y")

ggplot(data = pp_all_diff, aes(x=parameter_group, y=value,group=variable)) + geom_boxplot(aes(fill=parameter_group),outlier.shape=NA)+ coord_flip()+
  theme(legend.position = "none")+ 
  facet_grid(.~parameter, labeller=lab_labeller,scales = "free_y")+
  labs(y="Marginal posterior distributions",x="")
```


