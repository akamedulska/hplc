## Utility function

We test the probability of two compounds separating within a retention window of 2-15 minutes.

```{r, fig.height=8}
#| echo: false
#| message: false
#| warning: false
library(pracma)
library(dplyr)
library(ggplot2)
require(gridExtra)
library(GGally)
library(cmdstanr)
library(rstan)
library(knitr)
library(reshape2)
library(bayesplot)
library(posterior)

set.seed(10271998) ## not required but assures repeatable results

data1 = read.csv('C:/Users/agnie/Desktop/HPLC_2022/X_Bridge_Shield_C18/skrypt-R/data/1-X_Bridge_Shield_C18_5cm.csv')
data1$Mod  = as.character(data1$Mod)
data1$Mod2 = ifelse(data1$Mod=="MeOH",1,2)                        # MeOH = 1, ACN = 2

dataNames = read.csv('C:/Users/agnie/Desktop/HPLC_2022/X_Bridge_Shield_C18/skrypt-R/data/4-compounds-names.csv')
dataACD = read.csv('C:/Users/agnie/Desktop/HPLC_2022/X_Bridge_Shield_C18/skrypt-R/data/2-ACD-pKas-logP.csv')
functional_groups = read.csv('C:/Users/agnie/Desktop/HPLC_2022/X_Bridge_Shield_C18/skrypt-R/data/6-checkmol-functional-groups.csv')
functional_groups_names = read.csv('C:/Users/agnie/Desktop/HPLC_2022/X_Bridge_Shield_C18/skrypt-R/data/Legend-checkmol-functional-group-names.csv')

# predictors
pKaslit = dataACD[,3:7]           # pKa values as predicted by ACD
pKasliterror = dataACD[,25:29]    # pKa error as predicted by ACD
chargesA = abs(dataACD[,13:18])   # number of ionized groups (anions)
chargesB = abs(dataACD[,19:24])   # number of ionized groups (cations)
charges = chargesA+chargesB                         # absolute charge
groupsA = (chargesA[,2:5] - chargesA[,1:4])         # acidic group
groupsB = -(chargesB[,2:5] - chargesB[,1:4])        # basic group
R = rowSums(pKaslit<14)                             # number of dissociation steps
logP = dataACD$logP 


functional_groups=functional_groups[,2:ncol(functional_groups)]

# combine nr of caroboxylic acid and carboxyalic acid salt functional groups
functional_groups[,76]=functional_groups[,76]+functional_groups[,77]       
functional_groups[which(functional_groups[,202]>5.5),202] = 6; # heterocyclic compounds with more than 6 heterocycles are treated as if they have six

########
idx_included <- c(4,5,9,11,14,18,19,20,21,24,26,29,30,31,32,33,34,38,39,40,41,45,49,50,52,53,54,56,57,59,63,64,68,69,70,71,76,78,79,81,82,83,84,85,88,90,106,108,113,114,115,127,131,133,137,138,150,164,166,167)
functional_groups_names <- functional_groups_names[idx_included,]
functional_groups <- functional_groups[,idx_included]
########

data1 <- data1[-which(data1$Score<95),]

ID_freq <- as.data.frame(table(data1$METID))
ID <- ID_freq[which(ID_freq$Freq>42),1]
data1 <- data1[which(data1$METID %in% ID),]
rm(ID_freq,ID)

data1$METEXPID = data1$METID*100+data1$EXPID
data1 <- data1 %>% 
  group_by(METEXPID) %>%
  slice(which.max(Score))

data1 <- data1[-which(data1$METID==72),]

data1 = data1[which(data1$METID %in% which(R<=2)),]

data2 = read.csv('C:/Users/agnie/Desktop/HPLC_2022/X_Terra_C18/skrypt_R/data/1-XTerra_MS_C18.csv')
data2$Mod  = as.character(data2$Mod)
data2$Mod2 = ifelse(data2$Mod=="MeOH",1,2)                        # MeOH = 1, ACN = 2

data2 <- data2[-which(data2$Score<95),]

ID_freq <- as.data.frame(table(data2$METID))
ID <- ID_freq[which(ID_freq$Freq>42),1]
data2 <- data2[which(data2$METID %in% ID),]
rm(ID_freq,ID)

data2$METEXPID = data2$METID*100+data2$EXPID
data2 <- data2 %>% 
  group_by(METEXPID) %>%
  slice(which.max(Score))

data2 <- data2[-which(data2$METID==72),]

data2 = data2[which(data2$METID %in% which(R<=2)),]


# Prepare predictors:
maxR =2                                                                # max two dissociation steps        
pKaslit1 = pKaslit[which(dataACD$METID %in% data1$METID),1:maxR]              # pKa values as predicted by ACD
pKasliterror1 = pKasliterror[which(dataACD$METID %in% data1$METID),1:maxR]    # pKa error as predicted by ACD
chargesA1 = chargesA[which(dataACD$METID %in% data1$METID),1:(maxR+1)]   # number of ionized groups (anions)
chargesB1 = chargesB[which(dataACD$METID %in% data1$METID),1:(maxR+1)]   # number of ionized groups (cations)
charges1 = charges[which(dataACD$METID %in% data1$METID),1:(maxR+1)]     # absolute charge
groupsA1 = groupsA[which(dataACD$METID %in% data1$METID),1:maxR]         # acidic group
groupsB1 = groupsB[which(dataACD$METID %in% data1$METID),1:maxR]         # basic group
R1 = R[which(dataACD$METID %in% data1$METID)]                             # number of dissociation steps
logP1 = logP[which(dataACD$METID %in% data1$METID)]                       # logP
nrfungroups1 = functional_groups[which(dataACD$METID %in% data1$METID),]

pKaslit2 = pKaslit[which(dataACD$METID %in% data2$METID),1:maxR]              # pKa values as predicted by ACD
pKasliterror2 = pKasliterror[which(dataACD$METID %in% data2$METID),1:maxR]    # pKa error as predicted by ACD
chargesA2 = chargesA[which(dataACD$METID %in% data2$METID),1:(maxR+1)]   # number of ionized groups (anions)
chargesB2 = chargesB[which(dataACD$METID %in% data2$METID),1:(maxR+1)]   # number of ionized groups (cations)
charges2 = charges[which(dataACD$METID %in% data2$METID),1:(maxR+1)]     # absolute charge
groupsA2 = groupsA[which(dataACD$METID %in% data2$METID),1:maxR]         # acidic group
groupsB2 = groupsB[which(dataACD$METID %in% data2$METID),1:maxR]         # basic group
R2 = R[which(dataACD$METID %in% data2$METID)]                             # number of dissociation steps
logP2 = logP[which(dataACD$METID %in% data2$METID)]                       # logP
nrfungroups2 = functional_groups[which(dataACD$METID %in% data2$METID),]

K <- ncol(nrfungroups1)

nObs1 = length(data1$METID)
nAnalytes1 = length(unique(data1$METID))
npH = length(unique(data1$pH))
analyte1=match(data1$METID, unique(data1$METID))
steps1=4*(2-data1$Mod2) + 10*(data1$Mod2-1)
hplcparam1=cbind(data1$tg,data1$td,data1$to,data1$te,data1$fio,data1$fik,data1$Mod2,
                 data1$pHo,data1$alpha1,data1$alpha2,(data1$Temp-25)/10)
mod1=data1$Mod2
logPobs1=logP1
trobs1=data1$RT

nObs2 = length(data2$METID)
nAnalytes2 = length(unique(data2$METID))
analyte2=match(data2$METID, unique(data2$METID))
steps2=4*(2-data2$Mod2) + 10*(data2$Mod2-1)
hplcparam2=cbind(data2$tg,data2$td,data2$to,data2$te,data2$fio,data2$fik,data2$Mod2,
                 data2$pHo,data2$alpha1,data2$alpha2,(data2$Temp-25)/10)
mod2=data2$Mod2
logPobs2=logP2
trobs2=data2$RT

index <- c(10,11)
pH_value <- c(2,3,4,5,6,7,8,9,10,11,12)
gradient <- 30
temp <-c(25,35)
nAnalytes3 <- length(index)
fi_value <- c(0.5)

fi <- rep(rep(fi_value,length(pH_value)),2*nAnalytes3)
pH <- rep(rep(pH_value,each=length(fi_value)*2),nAnalytes3)
fipH3 <-cbind(fi,pH)

pHo_1  <- c(2.494082,  2.514011,  2.507084,  2.483992,  #pH=1 - 2.5 
            3.402085,  3.431361,  3.428675,  3.398003,	#pH=2 - 3.3
            6.843702,  7.331219,  7.356560,  6.810815,	#pH=6 - 6.8
            10.502949, 10.195814, 10.190990, 10.517369,  #pH=9 - 10.5
            4.938005,  4.957298,  4.947208,  4.928445,	#pH=4 - 4.9
            5.777102,  5.791394,  5.838224,  5.817305,	#pH=5 - 5.8
            8.875880,  8.568016,  8.580016,  8.890530,  #pH=7 - 8.9
            9.620316,  9.319468,  9.329717,  9.628639,	#pH=8 - 9.7
            4.172955,  4.202902,  4.178003,  4.149028)	#pH=3 - 4.1

alpha1_1 <- c(0.57873300, 0.44117918, 0.54090500, 0.42792546, #pH=1
              0.82783763, 0.73291100, 0.56586591, 0.56910464, #pH=2
              5.60764807, 4.37780336, 2.76084717, 5.24573418, #pH=6
              -0.93599336,-1.48119846,-0.83424655,-0.67501446, #pH=9
              1.58296990, 1.52743172, 0.95662418, 0.95381600, #pH=4
              1.82029346, 1.87782264, 0.13722716, 0.08902752, #pH=5
              -0.91137517,-1.11923744,-1.19447681,-0.85834636, #pH=7
              -0.38487309,-0.49551890,-0.91021527,-0.61291100, #pH=8
              0.34560244, 0.24743708, 0.56910464, 0.59363500) #pH=3

alpha2_1 <- c(1.74974831, 1.98438471, 1.37875120, 1.54409339, #pH=1
              1.67822641, 1.78324944, 1.49943237, 1.52847810, #pH=2
              -4.36394988,-4.14747778,-1.66462461,-3.89936811, #pH=6
              -0.29501981, 0.60115669,-0.08490950,-0.16084395, #pH=9
              1.32742851, 1.27379244, 1.46813752, 1.56200064, #pH=4
              0.42009211, 0.06698083, 2.02037057, 2.27064368, #pH=5
              -0.43138053,-0.22808182, 0.44239049, 0.04022705, #pH=7
              -1.05481418,-1.03917747, 0.13854557,-0.18324944, #pH=8
              2.30183142, 2.37780872, 1.52847810, 1.52625040) #pH=3

mod3 <- rep(rep(c(2,1),each=2),9*nAnalytes3)
steps3=4*(2-mod3) + 10*(mod3-1)
hplcparam3=cbind(rep(gradient,by=9*2*2*nAnalytes3),
                 rep(2.1,by=9*2*2*nAnalytes3),
                 rep(0.532,by=9*2*2*nAnalytes3),
                 rep(0.04,by=9*2*2*nAnalytes3),
                 rep(0.05,by=9*2*2*nAnalytes3),
                 rep(0.8,by=9*2*2*nAnalytes3),
                 mod3,
                 rep(pHo_1,nAnalytes3),
                 rep(alpha1_1,nAnalytes3),
                 rep(alpha2_1,nAnalytes3),
                 (rep(temp,9*2*nAnalytes3)-25)/10)

nObs3 <- 9*2*2*nAnalytes3
analyte3 <- rep(which(unique(data1$METID) %in% index),each=9*2*2)  # 1 - column (xbridge)
analyte4 <- rep(which(unique(data2$METID) %in% index),each=9*2*2)  # 2 - column (xterra)
analyte5 <- rep(c(1,2),each=9*2*2)  # 2 - column (xterra)
pKaslit3 = pKaslit[which(dataACD$METID %in% index),1:maxR]              # pKa values as predicted by ACD
pKasliterror3 = pKasliterror[which(dataACD$METID %in% index),1:maxR]    # pKa error as predicted by ACD
chargesA3 = chargesA[which(dataACD$METID %in% index),1:(maxR+1)]   # number of ionized groups (anions)
chargesB3 = chargesB[which(dataACD$METID %in% index),1:(maxR+1)]   # number of ionized groups (cations)
charges3 = charges[which(dataACD$METID %in% index),1:(maxR+1)]     # absolute charge
groupsA3 = groupsA[which(dataACD$METID %in% index),1:maxR]         # acidic group
groupsB3 = groupsB[which(dataACD$METID %in% index),1:maxR]         # basic group
R3 = R[which(dataACD$METID %in% index)]                             # number of dissociation steps
logPobs3 = logP[which(dataACD$METID %in% index)]                       # logP
nrfungroups3 = functional_groups[which(dataACD$METID %in% index),]

####################################

stan_rdump(c("nAnalytes1", 
             "nAnalytes2",
             "nObs1",
             "nObs2",
             "npH", 
             "analyte1", 
             "steps1", 
             "hplcparam1",  
             "mod1",
             "analyte2", 
             "steps2", 
             "hplcparam2",  
             "mod2",
             "logPobs1", 
             "logPobs2", 
             "maxR", 
             "R1", 
             "pKaslit1",  
             "pKasliterror1",
             "groupsA1",
             "groupsB1",
             "chargesA1", 
             "chargesB1",
             "trobs1",
             "trobs2",
             "K",
             "nrfungroups1",
             "R2", 
             "pKaslit2",  
             "pKasliterror2",
             "groupsA2",
             "groupsB2",
             "chargesA2", 
             "chargesB2",
             "nrfungroups2",
             "nObs3",
             "analyte3", 
             "analyte4",
             "analyte5",
             "steps3", 
             "hplcparam3",  
             "mod3",
             "nAnalytes3",
             "logPobs3",
             "groupsA3",
             "groupsB3",
             "chargesA3", 
             "chargesB3",
             "nrfungroups3",
             "R3", 
             "pKaslit3",  
             "pKasliterror3"),
           file="C:/Users/agnie/Desktop/HPLC_2022/1_25_09_combined/01_04_10/model_qq_3.data.R")

#model_qq <- cmdstan_model("C:/Users/agnie/Desktop/HPLC_2022/1_25_09_combined/01_04_10/hplc-gra-redsum_qsrr_04_10_qq_3.stan")

#fit_Combined <- cmdstanr::as_cmdstan_fit(c('C:/Users/agnie/Desktop/HPLC_2022/1_25_09_combined/01_04_10/TASK/output_1.csv',
#                                           'C:/Users/agnie/Desktop/HPLC_2022/1_25_09_combined/01_04_10/TASK/output_2.csv',
#                                           'C:/Users/agnie/Desktop/HPLC_2022/1_25_09_combined/01_04_10/TASK/output_3.csv',
#                                           'C:/Users/agnie/Desktop/HPLC_2022/1_25_09_combined/01_04_10/TASK/output_4.csv',
#                                           'C:/Users/agnie/Desktop/HPLC_2022/1_25_09_combined/01_04_10/TASK/output_5.csv',
#                                           'C:/Users/agnie/Desktop/HPLC_2022/1_25_09_combined/01_04_10/TASK/output_6.csv',
#                                           'C:/Users/agnie/Desktop/HPLC_2022/1_25_09_combined/01_04_10/TASK/output_7.csv',
#                                           'C:/Users/agnie/Desktop/HPLC_2022/1_25_09_combined/01_04_10/TASK/output_8.csv',
#                                           'C:/Users/agnie/Desktop/HPLC_2022/1_25_09_combined/01_04_10/TASK/output_9.csv',
#                                           'C:/Users/agnie/Desktop/HPLC_2022/1_25_09_combined/01_04_10/TASK/output_10.csv'))

#fit_3_qq  <- model_qq$generate_quantities(fit_Combined,data = #"C:/Users/agnie/Desktop/HPLC_2022/1_25_09_combined/01_04_10/model_qq_3.data.R",seed = 123)
#rm(fit_Combined,hplcparam1,hplcparam2,hplcparam3,hplcparam4,model_qq,data1,data2)
#fit_3_qq$save_object(file = "C:/Users/agnie/Desktop/HPLC_2022/1_25_09_combined/01_04_10/fit_3_qq.RDS")
fit_3_qq <- readRDS("C:/Users/agnie/Desktop/HPLC_2022/1_25_09_combined/01_04_10/fit_3_qq.RDS")
draws_3_qq_df <- fit_3_qq$draws(format = "df")
```

### Individual

```{r, fig.height=6}
#| echo: true
#| message: false
#| warning: false
df <- draws_3_qq_df
trCond1 <- df[,which(colnames(df) %in% grep("trCond1", names(df), value = TRUE))]
trCond2 <- df[,which(colnames(df) %in% grep("trCond2", names(df), value = TRUE))]

tr_1 <- t(trCond1)
tr_diff <- tr_1[1:36,]-tr_1[37:72,]

utility1 <- matrix(NA,36,4000)
for(i in 1:36){
  for (j in 1:4000){
    if(tr_1[i,j]>2 & tr_1[i,j]<15 & tr_1[i+36,j]>2 & tr_1[i+36,j]<15 & (tr_diff[i,j]>0.5 | tr_diff[i,j]< -0.5)){
      utility1[i,j]=1
    }else{utility1[i,j]=0}
  }
}
utility_function1 <-apply(utility1, MARGIN = 1, FUN = mean)

tr_1 <- t(trCond2)
tr_diff <- tr_1[1:36,]-tr_1[37:72,]

utility2 <- matrix(NA,36,4000)
for(i in 1:36){
  for (j in 1:4000){
    if(tr_1[i,j]>2 & tr_1[i,j]<15 & tr_1[i+36,j]>2 & tr_1[i+36,j]<15 & (tr_diff[i,j]>0.5 | tr_diff[i,j]< -0.5)){
      utility2[i,j]=1
    }else{utility2[i,j]=0}
  }
}
utility_function2 <-apply(utility2, MARGIN = 1, FUN = mean)

utility_function <-c(utility_function1,utility_function2)
mod3_plot <- rep(rep(c(2,1),each=2),9*2)
temp_plot <- rep(temp,9*2*2)
Column <- rep(c("XBrigde Shield C18","XTerra C18"),each=36)
pHo <- rep(pHo_1,2)
  
data_to_plot <- as.data.frame(cbind(utility_function, mod3_plot,temp_plot,pHo, Column))
data_to_plot$utility_function <- as.numeric(data_to_plot$utility_function)
data_to_plot$pHo <- as.numeric(data_to_plot$pHo)

mod.labs <- c("ACN","MeOH")
names(mod.labs) <- c('2','1')

ggplot(data_to_plot[which(data_to_plot$temp_plot==25),])+
    geom_line(aes(x = pHo,  y = utility_function, color =Column))+
    facet_grid(~mod3_plot,labeller = labeller(mod3_plot=mod.labs))
```
